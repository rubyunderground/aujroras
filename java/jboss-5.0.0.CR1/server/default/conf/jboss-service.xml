<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id: jboss-service.xml 71442 2008-03-30 02:17:10Z bstansberry@jboss.com $ -->

<!-- ===================================================================== -->
<!--  JBoss Server Configuration                                           -->
<!-- ===================================================================== -->

<server>

   <!-- Load all jars from the JBOSS_DIST/server/<config>/lib directory. This
     can be restricted to specific jars by specifying them in the archives
     attribute.
    -->
   <classpath codebase="${jboss.server.lib.url:lib}" archives="*"/>

   <!-- ==================================================================== -->
   <!-- Main Deployer                                                        -->
   <!-- ==================================================================== -->
   <mbean code="org.jboss.deployment.MainDeployer"
          name="jboss.system:service=MainDeployer">
   	<!-- This is used to delegate the deployment handling -->
      <attribute name="KernelMainDeployer"><inject bean="MainDeployer" /></attribute>
      <!-- This is used to validate incomplete deployments -->
      <attribute name="Controller"><inject bean="jboss.kernel:service=Kernel" property="controller"/></attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- SAR Deployer                                                         -->
   <!-- ==================================================================== -->
   <mbean code="org.jboss.deployment.SARDeployer"
          name="jboss.system:service=ServiceDeployer">
      <depends>jboss.system:service=MainDeployer</depends>
   </mbean>

   <!-- ==================================================================== -->
   <!-- JSR-77 Single JBoss Server Management Domain                         -->
   <!-- ==================================================================== -->
   <mbean code="org.jboss.management.j2ee.LocalJBossServerDomain"
      name="jboss.management.local:j2eeType=J2EEDomain,name=Manager">
      <attribute name="MainDeployer">jboss.system:service=MainDeployer</attribute>
      <attribute name="SARDeployer">jboss.system:service=ServiceDeployer</attribute>
      <attribute name="EARDeployer">jboss.j2ee:service=EARDeployer</attribute>
      <attribute name="EJBDeployer">jboss.ejb:service=EJBDeployer</attribute>
      <attribute name="RARDeployer">jboss.jca:service=RARDeployer</attribute>
      <attribute name="CMDeployer">jboss.jca:service=ConnectionFactoryDeployer</attribute>
      <attribute name="WARDeployer">jboss.web:service=WebServer</attribute>
      <attribute name="CARDeployer">jboss.j2ee:service=ClientDeployer</attribute>
      <attribute name="MailService">jboss:service=Mail</attribute>
      <attribute name="JMSService">jboss.mq:service=DestinationManager</attribute>
      <attribute name="JNDIService">jboss:service=Naming</attribute>
      <attribute name="JTAService">jboss:service=TransactionManager</attribute>
      <attribute name="UserTransactionService">jboss:service=DistributedTransactionManager</attribute>
      <attribute name="RMI_IIOPService">jboss:service=CorbaORB</attribute>
      <depends>jboss.system:service=MainDeployer</depends>
   </mbean>

   <!-- ==================================================================== -->
   <!-- XMBean Persistence                                                   -->
   <!-- ==================================================================== -->
   <mbean code="org.jboss.system.pm.AttributePersistenceService"
      name="jboss:service=AttributePersistenceService"
      xmbean-dd="resource:xmdesc/AttributePersistenceService-xmbean.xml">
      <!-- the AttributePersistenceService is persistent, itself -->

      <!--
      <attribute name="AttributePersistenceManagerClass">org.jboss.system.pm.XMLAttributePersistenceManager</attribute>
      <attribute name="AttributePersistenceManagerConfig">
         <data-directory>data/xmbean-attrs</data-directory>
      </attribute>
      <attribute name="ApmDestroyOnServiceStop">false</attribute>
      <attribute name="VersionTag"></attribute>
      -->
   </mbean>

   <!-- A Thread pool service -->
   <mbean code="org.jboss.util.threadpool.BasicThreadPool"
      name="jboss.system:service=ThreadPool">
      <attribute name="Name">JBoss System Threads</attribute>
      <attribute name="ThreadGroupName">System Threads</attribute>
      <!-- How long a thread will live without any tasks in MS -->
      <attribute name="KeepAliveTime">60000</attribute>
      <!-- The max number of threads in the pool -->
      <attribute name="MaximumPoolSize">10</attribute>
      <!-- The max number of tasks before the queue is full -->
      <attribute name="MaximumQueueSize">1000</attribute>
      <!-- The behavior of the pool when a task is added and the queue is full.
      abort - a RuntimeException is thrown
      run - the calling thread executes the task
      wait - the calling thread blocks until the queue has room
      discard - the task is silently discarded without being run
      discardOldest - check to see if a task is about to complete and enque
         the new task if possible, else run the task in the calling thread
      -->
      <attribute name="BlockingMode">run</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Log4j Initialization                                                 -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.logging.Log4jService"
      name="jboss.system:type=Log4jService,service=Logging"
	  xmbean-dd="resource:xmdesc/Log4jService-xmbean.xml">
      <attribute name="ConfigurationURL">resource:jboss-log4j.xml</attribute>
      <!-- Set the org.apache.log4j.helpers.LogLog.setQuiteMode. As of log4j1.2.8
      this needs to be set to avoid a possible deadlock on exception at the
      appender level. See bug#696819.
      -->
      <attribute name="Log4jQuietMode">true</attribute>
      <!-- How frequently in seconds the ConfigurationURL is checked for changes -->
      <attribute name="RefreshPeriod">60</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Active Alarm Table                                                   -->
   <!-- ==================================================================== -->

   <!--
      | The ActiveAlarmTable service is a simple JMX notification listener
      | that maintains a table with the received notifications (alarms).
      | The alarms can be acknowledged through the jmx or the web console.
      | Modify the SubscriptionList below to subscribe for any notification
      | in the system and treat it as an alarm.
      | The JMXNotificationAppender is a log4j Appender that can be configured
      | in log4j.xml, that trasforms logging events to JMX notification so they
      | can be fed back into the table. By storing the WARN or higher level logging
      | events you can have a quick view of important system faults.
      |
      | The following attributes may be set:
      |
      | MaxTableSize (default 1000)
      |  - set an upper limit to the number of stored alarms
      | LogLevel (default DEBUG)
      |  - the log level to use for received notification, can be set to NONE
      | ServerId (default jboss)
      |  - used to construct unique alarm ids
      | SubscriptionList
      |  - subscribe for the notifications to be stored in the table

   <mbean code="org.jboss.monitor.services.ActiveAlarmTable"
          name="jboss.monitor:service=ActiveAlarmTable">
      <attribute name="SubscriptionList">
         <subscription-list>
            <mbean name="jboss.monitor:*">
               <notification type="jboss.alarm"/>
               <notification type="JBOSS_MONITOR_NOTIFICATION"/>
            </mbean>
            <mbean name="jboss.system:service=Logging,type=JMXNotificationAppender"/>
         </subscription-list>
      </attribute>
   </mbean>
   -->

   <!-- ==================================================================== -->
   <!-- JBoss RMI Classloader - only install when available                  -->
   <!-- ==================================================================== -->
   <mbean code="org.jboss.util.property.jmx.SystemPropertyClassValue"
      name="jboss.rmi:type=RMIClassLoader">
      <attribute name="Property">java.rmi.server.RMIClassLoaderSpi</attribute>
      <attribute name="ClassName">org.jboss.system.JBossRMIClassLoader</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Service Binding                                                      -->
   <!-- ==================================================================== -->

   <!-- Automatically activated when generatting the clustering environment -->
   <!-- @TESTSUITE_CLUSTER_CONFIG@ -->

   <!--
      | Binding service manager for port/host mapping. This is a sample
      | config that demonstrates a JBoss instances with a server name 'jboss1'
      | loading its bindings from an XML file using the ServicesStoreFactory
      | implementation returned by the XMLServicesStoreFactory.
      |
      | ServerName: The unique name assigned to a JBoss server instance for
      | lookup purposes. This allows a single ServicesStore to handle mulitiple
      | JBoss servers.
      |
      | StoreURL: The URL string passed to org.jboss.services.binding.ServicesStore
      | during initialization that specifies how to connect to the bindings store.
      | StoreFactory: The org.jboss.services.binding.ServicesStoreFactory interface
      | implementation to create to obtain the ServicesStore instance.

   <mbean code="org.jboss.services.binding.ServiceBindingManager"
     name="jboss.system:service=ServiceBindingManager">
     <attribute name="ServerName">ports-01</attribute>
     <attribute name="StoreURL">../docs/examples/binding-manager/sample-bindings.xml</attribute>
     <attribute name="StoreFactoryClassName">
       org.jboss.services.binding.XMLServicesStoreFactory
     </attribute>
   </mbean>

   -->

   <!-- ==================================================================== -->
   <!-- Class Loading                                                        -->
   <!-- ==================================================================== -->

   <!-- A mini webserver used for dynamic and class and resource loading --> 
   <mbean code="org.jboss.web.WebService"
      name="jboss:service=WebService">
      <!-- The Bind address and Port -->
      <attribute name="BindAddress">${jboss.bind.address}</attribute>      
      <attribute name="Port">8083</attribute>
      <!--  The address to use for the host portion of the RMI codebase URL -->
      <attribute name="Host">${java.rmi.server.hostname}</attribute>
      <!-- Should non-EJB .class files be downloadable -->
      <attribute name="DownloadServerClasses">true</attribute>
      <!-- Should resources other than .class files be downloadable. Both
         DownloadServerClasses and DownloadResources must be true for resources
         to be downloadable. This is false by default because its generally a
         bad idea as server configuration files that container security
         information can be accessed.
       -->
      <attribute name="DownloadResources">false</attribute>

      <!-- Use the default thread pool for dynamic class loading -->
      <depends optional-attribute-name="ThreadPool"
         proxy-type="attribute">jboss.system:service=ThreadPool</depends>
   </mbean>

   <!-- ==================================================================== -->
   <!-- JNDI                                                                 -->
   <!-- ==================================================================== -->

   <!-- A simple mbean wrapper around the jndi Naming object. This
      only handles an in memory instance. The NamingService uses this
      as the JNDI store and exposes it remotely.
   -->
   <mbean code="org.jnp.server.NamingBeanImpl"
      name="jboss:service=NamingBeanImpl"
      xmbean-dd="resource:xmdesc/NamingBean-xmbean.xml">
   </mbean>
   
   <mbean code="org.jboss.naming.NamingService"
      name="jboss:service=Naming"
      xmbean-dd="resource:xmdesc/NamingService-xmbean.xml">
      <!-- The call by value mode. true if all lookups are unmarshalled using
         the caller's TCL, false if in VM lookups return the value by reference.
      -->
      <attribute name="CallByValue">false</attribute>
      <!-- The listening port for the bootstrap JNP service. Set this to -1
         to run the NamingService without the JNP invoker listening port.
      -->
      <attribute name="Port">1099</attribute>
      <!-- The bootstrap JNP server bind address. This also sets the default
         RMI service bind address. Empty == all addresses
      -->
      <attribute name="BindAddress">${jboss.bind.address}</attribute>
      <!-- The port of the RMI naming service, 0 == anonymous -->
      <attribute name="RmiPort">1098</attribute>
      <!-- The RMI service bind address. Empty == all addresses
      -->
      <attribute name="RmiBindAddress">${jboss.bind.address}</attribute>
      <!-- The thread pool service used to control the bootstrap lookups -->
      <depends optional-attribute-name="LookupPool"
         proxy-type="attribute">jboss.system:service=ThreadPool</depends>
      <!-- An example of using the unifed invoker as the transport.
         <depends optional-attribute-name="InvokerProxyFactory"
         proxy-type="attribute">jboss:service=proxyFactory,type=unified,target=Naming</depends>
      -->
      <depends optional-attribute-name="Naming"
         proxy-type="attribute">jboss:service=NamingBeanImpl</depends>
   </mbean>
   
   <mbean code="org.jboss.naming.JNDIView"
   	name="jboss:service=JNDIView"
   	xmbean-dd="resource:xmdesc/JNDIView-xmbean.xml">
   	<!-- The HANamingService service name -->
   	<attribute name="HANamingService">jboss:service=HAJNDI</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Security                                                             -->
   <!-- ==================================================================== -->

   <!-- JAAS security manager and realm mapping -->
   <mbean code="org.jboss.security.plugins.JaasSecurityManagerService"
      name="jboss.security:service=JaasSecurityManager">
      <!-- A flag which indicates whether the SecurityAssociation server mode
      is set on service creation. This is true by default since the
      SecurityAssociation should be thread local for multi-threaded server
      operation.
      -->
      <attribute name="ServerMode">true</attribute>
      <attribute name="SecurityManagerClassName">org.jboss.security.plugins.JaasSecurityManager</attribute>
      <attribute name="DefaultUnauthenticatedPrincipal">anonymous</attribute>
      <!-- DefaultCacheTimeout: Specifies the default timed cache policy timeout
      in seconds.
      If you want to disable caching of security credentials, set this to 0 to
      force authentication to occur every time. This has no affect if the
      AuthenticationCacheJndiName has been changed from the default value.
      -->
       <attribute name="DefaultCacheTimeout">1800</attribute>
      <!-- DefaultCacheResolution: Specifies the default timed cache policy
      resolution in seconds. This controls the interval at which the cache
      current timestamp is updated and should be less than the DefaultCacheTimeout
      in order for the timeout to be meaningful. This has no affect if the
      AuthenticationCacheJndiName has been changed from the default value.
      -->
      <attribute name="DefaultCacheResolution">60</attribute>
      <!-- DeepCopySubjectMode: This set the copy mode of subjects done by the
      security managers to be deep copies that makes copies of the subject
      principals and credentials if they are cloneable. It should be set to
      true if subject include mutable content that can be corrupted when
      multiple threads have the same identity and cache flushes/logout clearing
      the subject in one thread results in subject references affecting other
      threads.
      -->
      <attribute name="DeepCopySubjectMode">false</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Remoting services                                                    -->
   <!-- ==================================================================== -->

   <!-- For detailed description of all these configuration attributes, please see the -->
   <!-- JBoss Remoting User's Guide or wiki (http://www.jboss.org/wiki/Wiki.jsp?page=Remoting_configuration) -->

    <!-- The NetworkRegistry contains all the local and remote -->
    <!-- servers that it recognizes.  The remote ones registered -->
    <!-- are dependant on the detectors running and which domains -->
    <!-- they are configured to identify.                         -->
    <mbean code="org.jboss.remoting.network.NetworkRegistry"
           name="jboss.remoting:service=NetworkRegistry"/>

   <!-- The Connector is the core component of the remoting server service. -->
   <!-- It binds the remoting invoker (transport protocol, callback configuration, -->
   <!-- data marshalling, etc.) with the invocation handlers.  -->
   <mbean code="org.jboss.remoting.transport.Connector"
          name="jboss.remoting:service=Connector,transport=socket"
          display-name="Socket transport Connector">

       <!-- Can either just specify the InvokerLocator attribute and not the invoker element in the -->
       <!-- Configuration attribute, or do the full invoker configuration in the in invoker element -->
       <!-- of the Configuration attribute. -->

       <!-- Remember that if you do use more than one param on the uri, will have to include as a CDATA, -->
       <!-- otherwise, parser will complain. -->
       <!-- <attribute name="InvokerLocator"><![CDATA[socket://${jboss.bind.address}:4446/?datatype=invocation]]></attribute> -->

      <attribute name="Configuration">
         <!-- Using the following <invoker> element instead of the InvokerLocator above because specific attributes needed. -->
         <!-- If wanted to use any of the parameters below, can just add them as parameters to the url above if wanted use the InvokerLocator attribute. -->
         <config>
            <!-- Other than transport type and handler, none of these configurations are required (will just use defaults). -->
            <invoker transport="socket">
               <attribute name="dataType" isParam="true">invocation</attribute>
               <attribute name="marshaller" isParam="true">org.jboss.invocation.unified.marshall.InvocationMarshaller</attribute>
               <attribute name="unmarshaller" isParam="true">org.jboss.invocation.unified.marshall.InvocationUnMarshaller</attribute>
               <!-- This will be port on which the marshall loader port runs on.  -->
               <!-- <attribute name="loaderport" isParam="true">4447</attribute> -->
               <!-- The following are specific to socket invoker -->
               <!-- <attribute name="numAcceptThreads">1</attribute>-->
               <!-- <attribute name="maxPoolSize">303</attribute>-->
               <!-- <attribute name="clientMaxPoolSize" isParam="true">304</attribute>-->
               <attribute name="socketTimeout" isParam="true">600000</attribute>
               <attribute name="serverBindAddress">${jboss.bind.address}</attribute>
               <attribute name="serverBindPort">4446</attribute>
               <!-- <attribute name="clientConnectAddress">216.23.33.2</attribute> -->
               <!-- <attribute name="clientConnectPort">7777</attribute> -->
               <attribute name="enableTcpNoDelay" isParam="true">true</attribute>
               <!-- <attribute name="backlog">200</attribute>-->
               <!-- The following is for callback configuration and is independant of invoker type -->
               <!-- <attribute name="callbackMemCeiling">30</attribute>-->
               <!-- indicates callback store by fully qualified class name -->
               <!-- <attribute name="callbackStore">org.jboss.remoting.CallbackStore</attribute>-->
               <!-- indicates callback store by object name -->
               <!-- <attribute name="callbackStore">jboss.remoting:service=CallbackStore,type=Serializable</attribute> -->
               <!-- config params for callback store.  if were declaring callback store via object name, -->
               <!-- could have specified these config params there. -->
               <!-- StoreFilePath indicates to which directory to write the callback objects. -->
               <!-- The default value is the property value of 'jboss.server.data.dir' and if this is not set, -->
               <!-- then will be 'data'. Will then append 'remoting' and the callback client's session id. -->
               <!-- An example would be 'data\remoting\5c4o05l-9jijyx-e5b6xyph-1-e5b6xyph-2'. -->
               <!-- <attribute name="StoreFilePath">callback</attribute>-->
               <!-- StoreFileSuffix indicates the file suffix to use for the callback objects written to disk. -->
               <!-- The default value for file suffix is 'ser'. -->
               <!-- <attribute name="StoreFileSuffix">cst</attribute>-->
            </invoker>

            <!-- At least one handler is required by the connector.  If have more than one, must decalre -->
            <!-- different subsystem values.  Otherwise, all invocations will be routed to the only one -->
            <!-- that is declared. -->
            <handlers>
               <!-- The JSR88 deployment service StreamingTarget handler -->
               <handler subsystem="JSR88">org.jboss.deployment.remoting.DeployHandler</handler>
            </handlers>
         </config>
      </attribute>
      <depends>jboss.remoting:service=NetworkRegistry</depends>
   </mbean>


   <!-- <mbean code="org.jboss.remoting.detection.jndi.JNDIDetector"-->
   <!--      name="jboss.remoting:service=Detector,transport=jndi">-->
   <!-- host to which the detector will connect to for the JNDI server. -->
   <!-- <attribute name="Host">localhost</attribute>-->
   <!-- port to which detector will connect to for the JNDI server. -->
   <!-- <attribute name="Port">5555</attribute>-->
   <!-- context factory string used when connecting to the JNDI server. -->
   <!-- The default is org.jnp.interfaces.NamingContextFactory. -->
   <!-- <attribute name="ContextFactory">org.acme.NamingContextFactory</attribute> -->
   <!-- url package string to use when connecting to the JNDI server. -->
   <!-- The default is org.jboss.naming:org.jnp.interfaces. -->
   <!-- <attribute name="URLPackage">org.acme.naming</attribute> -->
   <!-- Sets the number of detection iterations before manually pinging -->
   <!-- remote server to make sure still alive. This is needed since remote server -->
   <!-- could crash and yet still have an entry in the JNDI server, -->
   <!-- thus making it appear that it is still there. The default value is 5. -->
   <!-- <attribute name="CleanDetectionNumber">20</attribute>-->

   <!-- Specifies the domains in which the detector will recognize -->
   <!-- detections.  If servers are not configured to be in these -->
   <!-- domains, they will not be added to NetworkRegistry. -->
   <!--      <attribute name="Configuration">-->
   <!--         <domains>-->
   <!--            <domain>roxanne</domain>-->
   <!--            <domain>sparky</domain>-->
   <!--         </domains>-->
   <!--      </attribute>-->
   <!--   </mbean>-->

   <!-- ==================================================================== -->
   <!-- Monitoring and Management                                            -->
   <!-- ==================================================================== -->

   <!-- Uncomment to enable JMX monitoring of the bean cache
   <mbean code="org.jboss.monitor.BeanCacheMonitor"
          name="jboss.monitor:name=BeanCacheMonitor"/>
   -->

   <!-- Uncomment to enable JMX monitoring of the entity bean locking
   <mbean code="org.jboss.monitor.EntityLockMonitor"
          name="jboss.monitor:name=EntityLockMonitor"/>
   -->

   <!-- ==================================================================== -->
   <!-- An MBean that is a registry for JDBC type-mapping metadata           -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.ejb.plugins.cmp.jdbc.metadata.MetaDataLibrary"
      name="jboss.jdbc:service=metadata"/>

</server>
